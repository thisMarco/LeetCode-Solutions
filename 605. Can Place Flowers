/* 
  You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.
  
  Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, 
  return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.

  Example 1:
  Input: flowerbed = [1,0,0,0,1], n = 1
  Output: true
  
  Example 2:
  Input: flowerbed = [1,0,0,0,1], n = 2
  Output: false
 
  Constraints:

  1 <= flowerbed.length <= 2 * 104
  flowerbed[i] is 0 or 1.
  There are no two adjacent flowers in flowerbed.
  0 <= n <= flowerbed.length
*/

class Solution {
    fun canPlaceFlowers(flowerbed: IntArray, n: Int): Boolean {
        
        var i: Int = 1;
        var nPlotsFree: Int = 0;
        //println("Array Size:" + flowerbed.size);
        
        if (n == 0)
            return true;
        
        if (flowerbed.size < 2 && n > 0 && flowerbed.get(0) != 0)
            return false;
        else if (flowerbed.size < 2 && n > 0 && flowerbed.get(0) == 0)
            return true;
        
        if (flowerbed.get(0) == 0 && flowerbed.get(1) == 0){
            flowerbed.set(0, 1);
            ++nPlotsFree;
        }
            
        while (i < flowerbed.size-1) {
            //println("Element at index: " + flowerbed.get(i));
            //println("Index: " + i);
            if (flowerbed.get(i) == 0 && flowerbed.get(i-1) == 0 && flowerbed.get(i+1) == 0) {
                println("Available Slot at index: " + i);
                ++nPlotsFree;
                flowerbed.set(i, 1);
            }
            
            ++i;
        }
        
        if (flowerbed.get(flowerbed.lastIndex) == 0 && flowerbed.get(flowerbed.lastIndex-1) == 0){
            //flowerbed.set(0, 1);
            ++nPlotsFree;
        }
        
        println("Free Slots: " + nPlotsFree);
        println("Needed Slots: " + n)
        if (nPlotsFree < n)
            return false;
        
        return true;        
    }
}
