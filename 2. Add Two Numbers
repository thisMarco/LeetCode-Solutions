/*
    You are given two non-empty linked lists representing two non-negative integers.
    The digits are stored in reverse order, and each of their nodes contains a single digit.
    Add the two numbers and return the sum as a linked list.
    
    You may assume the two numbers do not contain any leading zero, except the number 0 itself.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode result = new ListNode();
        
        int val1, val2, sum, rest;
        rest = 0;
        
        val1 = l1.val;
        val2 = l2.val;
        
        sum = val1 + val2;
        
        if (sum > 9) {
                result.val = sum%10;
                rest = 1;
            } else {
                result.val = sum;
            }
        
        ListNode firstNode = result;
        
        while (l1.next != null && l2.next != null) {
                       
            l1 = l1.next;
            l2 = l2.next;
            
            val1 = l1.val;
            val2 = l2.val;
            
            sum = val1 + val2 + rest;
            
            if (sum > 9) {
                result.next = new ListNode(sum -10);
                rest = 1;
            } else {
                result.next = new ListNode(sum);
                rest = 0;
            }
            
            result = result.next;
        }
        
        while (l1.next != null){
            System.out.println("IN L1");
            l1 = l1.next;
            sum = l1.val + rest;
            
            if (sum > 9) {
                result.next = new ListNode(sum -10);
                rest = 1;
                System.out.println("Vn: " + (sum -10));
            } else {
                result.next = new ListNode(sum);
                rest = 0;
                System.out.println("Vn: " + (sum));
            }
            
            result = result.next;
        }
        
        while (l2.next != null){
            System.out.println("IN L2");
            l2 = l2.next;
            sum = l2.val + rest;
            System.out.println("V2: " + l2.val);
            
            if (sum > 9) {
                result.next = new ListNode(sum -10);
                rest = 1;
            } else {
                result.next = new ListNode(sum);
                rest = 0;
            }
            
            result = result.next;
        }
        
        if (rest == 1)
            result.next = new ListNode(rest);
        
        return firstNode;
    }
}
